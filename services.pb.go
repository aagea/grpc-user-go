// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user/services.proto

package grpc_user_go // import "github.com/aagea/grpc-user-go"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import grpc_common_go "github.com/aagea/grpc-common-go"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*grpc_common_go.Void, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*grpc_common_go.Void, error)
}

type usersClient struct {
	cc *grpc.ClientConn
}

func NewUsersClient(cc *grpc.ClientConn) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*grpc_common_go.Void, error) {
	out := new(grpc_common_go.Void)
	err := c.cc.Invoke(ctx, "/user.Users/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) DeleteUser(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*grpc_common_go.Void, error) {
	out := new(grpc_common_go.Void)
	err := c.cc.Invoke(ctx, "/user.Users/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
type UsersServer interface {
	CreateUser(context.Context, *User) (*grpc_common_go.Void, error)
	DeleteUser(context.Context, *UserID) (*grpc_common_go.Void, error)
}

func RegisterUsersServer(s *grpc.Server, srv UsersServer) {
	s.RegisterService(&_Users_serviceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.Users/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).DeleteUser(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Users_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Users_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/services.proto",
}

func init() { proto.RegisterFile("user/services.proto", fileDescriptor_services_7f05fe28d6647d21) }

var fileDescriptor_services_7f05fe28d6647d21 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x01, 0x09, 0x4a, 0x89, 0x26, 0xe7, 0xe7, 0xe6, 0xe6, 0xe7, 0xe9, 0xa7, 0xe6, 0x95, 0x64,
	0x96, 0x64, 0xc2, 0x24, 0xa5, 0x20, 0x3a, 0x50, 0x05, 0x8d, 0x22, 0xb9, 0x58, 0x43, 0x8b, 0x53,
	0x8b, 0x8a, 0x85, 0xd4, 0xb8, 0xb8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x41, 0x5c, 0x21, 0x2e,
	0x3d, 0x90, 0x62, 0x3d, 0x10, 0x5b, 0x8a, 0x47, 0x0f, 0x62, 0x9e, 0x5e, 0x58, 0x7e, 0x66, 0x8a,
	0x90, 0x06, 0x17, 0x97, 0x4b, 0x6a, 0x4e, 0x2a, 0x54, 0x1d, 0x0f, 0x42, 0x9d, 0xa7, 0x0b, 0xaa,
	0x4a, 0x27, 0xf9, 0x28, 0xd9, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0x90, 0xa8, 0x7e, 0x62, 0x62,
	0x7a, 0x6a, 0xa2, 0x7e, 0x7a, 0x51, 0x41, 0xb2, 0x2e, 0x48, 0x8b, 0x6e, 0x7a, 0x7e, 0x12, 0x1b,
	0xd8, 0x09, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xa5, 0xd4, 0x95, 0xcb, 0x00, 0x00,
	0x00,
}
